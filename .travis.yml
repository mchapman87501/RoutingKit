language: cpp

sudo: required
dist: trusty

env:
  global:
    - OMP_NUM_THREADS=4

matrix:
  include:
    - os: linux
      env: CXX="g++" CXXFLAGS="-O3 -march=native"
    - os: linux
      env: CXX="g++" CXXFLAGS="-O3 -march=native -ffast-math"
    - os: linux
      env: CXX="g++" CXXFLAGS="-O3 -march=native -ffast-math -DNDEBUG"
    - os: linux
      env: CXX="g++" CXXFLAGS="-O3 -march=native -ffast-math -DROUTING_KIT_NO_GCC_EXTENSIONS -DROUTING_KIT_NO_POSIX"
    - os: linux
      addons: &clang5
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - libiomp-dev
            - libiomp5
      env: CXX="clang++-5.0" CXXFLAGS="-O3 -march=native -ffast-math"
    - os: linux
      addons: *clang5
      env: CXX="clang++-5.0" CXXFLAGS="-O3 -march=native -ffast-math -DNDEBUG -fsanitize=address -fno-omit-frame-pointer" LDFLAGS="-fsanitize=address"
    # Memory Sanitizer is deactivated because it is broken in the used Clang version.
    # The current version finds a use-of-uninitialized-value in the following simple code:
    #
    # #include <exception>
    # #include <iostream>
    # using namespace std;
    #
    # int main(){
    #   std::exception_ptr p;
    #   p = nullptr;
    #   if(p){
    #     cout << "???" << endl;
    #   }
    # }
    #
    # It is compiled using:
    # clang++-5.0 -std=c++11 -fsanitize=memory foo.cpp -o foo && ./foo
    #
    # - os: linux
    #   addons: *clang5
    #   env: CXX="clang++-5.0" OMP_LDFLAGS="-fopenmp=libiomp5" CXXFLAGS="-O3 -march=native -ffast-math -DNDEBUG -fsanitize=memory -fno-omit-frame-pointer" LDFLAGS="-fsanitize=memory"
    - os: linux
      addons: *clang5
      env: CXX="clang++-5.0" CXXFLAGS="-O3 -march=native -ffast-math -DNDEBUG -fsanitize=undefined -fno-omit-frame-pointer" LDFLAGS="-fsanitize=undefined"

before_script:
  - echo CXX=$CXX
  - echo CXXFLAGS=CXXFLAGS
  - echo LDFLAGS=LDFLAGS
  - $CXX --version
  - mkdir build
  - cd build
  - cmake ..
  - cmake --build .

script:
  - ctest
